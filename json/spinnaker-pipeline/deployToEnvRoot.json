{
  "configuration": {
    "concurrentExecutions": {
      "limitConcurrent": true,
      "parallel": true
    },
    "notifications": [
      {
        "address": "example@example.com",
        "level": "pipeline",
        "name": "email0",
        "type": "email",
        "when": [
          "pipeline.failed"
        ]
      }
    ],
    "parameters": [],
    "triggers": []
  },
  "id": "deployToEnvRoot",
  "metadata": {
    "description": "Defines a deploy pipeline that pushes to the target account, gated by a \nmanual judgement. This template should not be used directly.",
    "name": "Deploy to Target Env Root Template",
    "owner": "example@example.com"
  },
  "modules": [
    {
      "definition": {
        "account": "{{ account }}",
        "application": "{{ application }}",
        "availabilityZones": "{{ region }}:\n{% for az in availabilityZones %}\n- {{ az }}\n{% endfor %}\n",
        "capacity": {
          "desired": "{{ capacity }}",
          "max": "{{ capacity }}",
          "min": "{{ capacity }}"
        },
        "cloudProvider": "aws",
        "cooldown": 300,
        "ebsOptimized": false,
        "freeFormDetails": "{{ cluster|frigga('detail') }}",
        "healthCheckGracePeriod": 0,
        "healthCheckType": "EC2",
        "iamRole": "{{ application }}ExampleRole",
        "instanceMonitoring": true,
        "instanceType": "{{ instanceType }}",
        "keyPair": "{{ keyPair }}",
        "loadBalancers": "{% for lb in loadBalancers %}\n- {{ lb }}\n{% endfor %}\n",
        "maxRemainingAsgs": "{% if application == 'orca' %}3{% else %}1{% endif %}",
        "provider": "aws",
        "securityGroups": "{% for sg in securityGroups %}\n- {{ sg }}\n{% endfor %}\n",
        "stack": "{{ cluster|frigga('stack') }}",
        "strategy": "{{ strategy }}",
        "subnetType": "example",
        "suspendedProcesses": [],
        "tags": {},
        "targetHealthyDeployPercentage": 100,
        "terminationPolicies": [
          "Default"
        ],
        "useSourceCapacity": false
      },
      "id": "deployCluster",
      "variables": [
        {
          "name": "account"
        },
        {
          "name": "cluster"
        },
        {
          "name": "region"
        },
        {
          "name": "availabilityZones",
          "type": "list"
        },
        {
          "name": "capacity"
        },
        {
          "name": "keyPair"
        },
        {
          "name": "loadBalancers",
          "type": "list"
        },
        {
          "name": "securityGroups",
          "type": "list"
        },
        {
          "name": "strategy"
        },
        {
          "name": "instanceType"
        }
      ]
    }
  ],
  "partials": [
    {
      "id": "buildBrowser",
      "stages": [
        {
          "config": null,
          "id": "buildTarget",
          "name": "Build {{ target }}",
          "type": "jenkins"
        },
        {
          "dependsOn": [
            "buildTarget"
          ],
          "id": "publishTarget",
          "name": "Publish {{ target }}",
          "type": "jenkins"
        }
      ],
      "usage": "Builds the pipeline artifact targeting the a specified browser.",
      "variables": [
        {
          "description": "The target browser to build for",
          "name": "target"
        }
      ]
    }
  ],
  "pipeline": {
    "application": "orca",
    "name": "Simple Configuraiton Inheritance Example",
    "template": {
      "source": "file://template.yml"
    },
    "variables": {
      "childWaitTime": 15,
      "myCustomFirstStageName": "Find Image",
      "waitTime": 20
    }
  },
  "protect": false,
  "schema": "1",
  "stages": [
    {
      "config": {
        "failPipeline": true,
        "instructions": "Do you approve of this pipeline, which will push {{ application }} to {{ targetCredentials }}?",
        "judgmentInputs": [],
        "notifications": [
          {
            "address": "spinnaker",
            "level": "stage",
            "type": "slack",
            "when": [
              "manualJudgment"
            ]
          }
        ],
        "propagateAuthenticationContext": true,
        "sendNotifications": true
      },
      "id": "manualJudgment",
      "name": "Approve {{ targetCredentials }}",
      "type": "manualJudgment"
    },
    {
      "config": {
        "clusters": "{% for c in clusters %}\n- {% module deployCluster \n  account=targetCredentials,\n  cluster=c.name,\n  region=c.region,\n  availabilityZones=c.availabilityZones,\n  capacity=c.capacity,\n  keyPair=c.keyPair,\n  loadBalancers=c.loadBalancers,\n  securityGroups=c.securityGroups,\n  strategy=c.strategy,\n  instanceType=c.instanceType %}\n{% endfor %}\n"
      },
      "dependsOn": [
        "manualJudgment"
      ],
      "id": "deploy",
      "name": "Deploy",
      "type": "deploy"
    },
    {
      "config": {
        "baseLabel": "release",
        "baseOs": "trusty",
        "cloudProviderType": "aws",
        "enhancedNetworking": false,
        "extendedAttributes": {},
        "overrideTimeout": true,
        "package": "orca",
        "regions": [
          "us-east-1",
          "us-west-1",
          "us-west-2",
          "eu-west-1"
        ],
        "sendNotifications": true,
        "showAdvancedOptions": true,
        "stageTimeoutMs": 900000,
        "storeType": "ebs",
        "user": "example@example.com",
        "vmType": "hvm"
      },
      "id": "bake1",
      "name": "{{ myCustomFirstStageName }}",
      "type": "bake"
    },
    {
      "config": {
        "clusters": [
          {
            "account": "test",
            "application": "orca",
            "availabilityZones": {
              "us-west-1": [
                "us-west-1a",
                "us-west-1c"
              ]
            },
            "capacity": {
              "desired": 1,
              "max": 1,
              "min": 1
            },
            "cloudProvider": "aws",
            "cooldown": 10,
            "copySourceCustomBlockDeviceMappings": true,
            "ebsOptimized": false,
            "enabledMetrics": [],
            "freeFormDetails": "demo",
            "healthCheckGracePeriod": 600,
            "healthCheckType": "EC2",
            "iamRole": "myIAMRole",
            "instanceMonitoring": false,
            "instanceType": "m3.large",
            "interestingHealthProviderNames": [
              "Amazon"
            ],
            "keyPair": "keypair",
            "loadBalancers": [
              "orca-demo-frontend"
            ],
            "maxRemainingAsgs": 2,
            "preferSourceCapacity": true,
            "provider": "aws",
            "scaleDown": true,
            "securityGroups": [],
            "stack": "test",
            "strategy": "redblack",
            "subnetType": "mySubnet",
            "suspendedProcesses": [],
            "tags": {},
            "targetGroups": [],
            "targetHealthyDeployPercentage": 100,
            "terminationPolicies": [
              "Default"
            ],
            "useAmiBlockDeviceMappings": false,
            "useSourceCapacity": true
          },
          {
            "account": "test",
            "application": "orca",
            "availabilityZones": {
              "us-east-1": [
                "us-east-1c",
                "us-east-1d",
                "us-east-1e"
              ]
            },
            "capacity": {
              "desired": 0,
              "max": 0,
              "min": 0
            },
            "cloudProvider": "aws",
            "cooldown": 10,
            "ebsOptimized": false,
            "freeFormDetails": "demo",
            "healthCheckGracePeriod": 600,
            "healthCheckType": "EC2",
            "iamRole": "myIAMRole",
            "instanceMonitoring": false,
            "instanceType": "m3.large",
            "interestingHealthProviderNames": [
              "Amazon"
            ],
            "keyPair": "keypair",
            "provider": "aws",
            "securityGroups": [],
            "stack": "test",
            "strategy": "highlander",
            "subnetType": "mySubnet",
            "suspendedProcesses": [],
            "tags": {},
            "targetHealthyDeployPercentage": 100,
            "terminationPolicies": [
              "Default"
            ],
            "useSourceCapacity": false
          }
        ]
      },
      "dependsOn": [
        "bake1"
      ],
      "id": "deploy2",
      "name": "Deploy",
      "type": "deploy"
    },
    {
      "config": {
        "waitTime": "{{ waitTime }}"
      },
      "id": "wait1",
      "type": "wait"
    },
    {
      "config": {
        "waitTime": "{{ waitTime }}"
      },
      "dependsOn": [
        "wait1"
      ],
      "id": "waitChild1",
      "type": "wait"
    },
    {
      "config": {
        "waitTime": "{{ childWaitTime }}"
      },
      "dependsOn": [
        "wait1"
      ],
      "id": "waitChild2",
      "type": "wait"
    },
    {
      "config": {
        "waitTime": 10
      },
      "dependsOn": [
        "waitChild1",
        "waitChild2"
      ],
      "id": "finalWait",
      "type": "wait"
    },
    {
      "id": "inheritanceControlDeploy",
      "inheritanceControl": {
        "merge": [
          {
            "path": "$.clusters[?(@.provider==aws)].loadBalancers",
            "value": {
              "instancePort": 9000,
              "instanceProtocol": "http",
              "lbPort": 9000,
              "lbProtocol": "http"
            }
          }
        ],
        "remove": [
          {
            "path": "$.clusters[?(@.provider==aws)].loadBalancers[?(@.instancePort==8443)]"
          }
        ],
        "replace": [
          {
            "path": "$.clusters[?(@.provider==aws)].loadBalancers[?(@.instancePort==80)]",
            "value": {
              "instancePort": 8080,
              "instanceProtocol": "http",
              "lbPort": 80,
              "lbProtocol": "http"
            }
          }
        ]
      },
      "type": "deploy"
    },
    {
      "config": {
        "notifications": [
          {
            "channel": "#spinnaker",
            "type": "slack",
            "when": [
              "awaiting"
            ]
          }
        ],
        "propagateAuthentication": true
      },
      "id": "manualJudgmentBefore",
      "inject": {
        "before": [
          "deploy"
        ]
      },
      "type": "manualJudgment"
    },
    {
      "config": {
        "notifications": [
          {
            "channel": "#spinnaker",
            "type": "slack",
            "when": [
              "awaiting"
            ]
          }
        ],
        "propagateAuthentication": true
      },
      "id": "manualJudgmentAfter",
      "inject": {
        "after": [
          "deploy"
        ]
      },
      "type": "manualJudgment"
    },
    {
      "config": {
        "notifications": [
          {
            "channel": "#spinnaker",
            "type": "slack",
            "when": [
              "awaiting"
            ]
          }
        ],
        "propagateAuthentication": true
      },
      "id": "manualJudgmentFirst",
      "inject": {
        "first": [
          "deploy"
        ]
      },
      "type": "manualJudgment"
    },
    {
      "config": {
        "notifications": [
          {
            "channel": "#spinnaker",
            "type": "slack",
            "when": [
              "awaiting"
            ]
          }
        ],
        "propagateAuthentication": true
      },
      "id": "manualJudgmentLast",
      "inject": {
        "last": [
          "deploy"
        ]
      },
      "type": "manualJudgment"
    }
  ],
  "variables": [
    {
      "defaultValue": "mgmt",
      "description": "The account credentials where the application will be deployed to",
      "name": "targetCredentials"
    },
    {
      "description": "A list of cluster-specific configuration options",
      "example": "- name: orca-test\n  region: us-west-2\n  availabilityZones: [] # Omitted from example\n  capacity: 1\n  keyPair: example-keypair\n  loadBalancers:\n  - orca-test\n  securityGroups: [] # Omitted from example\n  strategy: highlander\n  instanceType: m3.xlarge\n",
      "name": "clusters",
      "type": "object"
    },
    {
      "defaultValue": false,
      "description": "Whether or not to deploy into the failover region.",
      "name": "deployToFailover"
    }
  ]
}
